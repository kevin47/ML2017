#!/usr/bin/env python
'''Visualization of the filters of VGG16, via gradient ascent in input space.

This script can run on CPU in a few minutes (with the TensorFlow backend).

Results example: http://i.imgur.com/4nj4KjN.jpg
'''
from __future__ import print_function

from scipy.misc import imsave
import numpy as np
import time
from keras.applications import vgg16
from keras import backend as K
from keras.models import load_model
from IPython import embed

# dimensions of the generated pictures for each filter.
img_width = 48
img_height = 48

# the name of the layer we want to visualize
# (see model definition at keras/applications/vgg16.py)
layer_name = 'conv2d_3'

# util function to convert a tensor into a valid image


def deprocess_image(x):
    # normalize tensor: center on 0., ensure std is 0.1
    x -= x.mean()
    x /= (x.std() + 1e-5)
    x *= 0.1

    # clip to [0, 1]
    x += 0.5
    x = np.clip(x, 0, 1)

    # convert to RGB array
    x *= 255
    if K.image_data_format() == 'channels_first':
        x = x.transpose((1, 2, 0))
    x = np.clip(x, 0, 255).astype('uint8')
    return x

# build the VGG16 network with ImageNet weights
model = load_model('model_best.h5')
print('Model loaded.')

model.summary()

# this is the placeholder for the input images
input_img = model.input

# get the symbolic outputs of each "key" layer (we gave them unique names).
layer_dict = dict([(layer.name, layer) for layer in model.layers[1:]])


def normalize(x):
    # utility function to normalize a tensor by its L2 norm
    return x / (K.sqrt(K.mean(K.square(x))) + 1e-5)


kept_filters = []
for filter_index in range(0, 64):
    # we only scan through the first 200 filters,
    # but there are actually 512 of them
    print('Processing filter %d' % filter_index)
    start_time = time.time()

    # we build a loss function that maximizes the activation
    # of the nth filter of the layer considered
    layer_output = layer_dict[layer_name].output
    if K.image_data_format() == 'channels_first':
        loss = K.mean(layer_output[:, filter_index, :, :])
    else:
        loss = K.mean(layer_output[:, :, :, filter_index])

    # we compute the gradient of the input picture wrt this loss
    grads = K.gradients(loss, input_img)[0]

    # normalization trick: we normalize the gradient
    grads = normalize(grads)

    # this function returns the loss and grads given the input picture
    iterate = K.function([input_img, K.learning_phase()], [loss, grads])

    # step size for gradient ascent
    step = 0.01

    # we start from a gray image with some random noise
    if K.image_data_format() == 'channels_first':
        input_img_data = np.random.random((1, 3, img_width, img_height))
    else:
        #input_img_data = np.random.random((1, img_width, img_height, 1))
        input_img_data = np.array([189,143,24,32,32,34,21,26,43,86,111,124,129,130,141,151,155,153,157,147,137,142,163,172,155,126,117,110,109,137,96,81,124,88,72,55,25,24,31,27,22,18,20,24,26,26,22,22,191,125,24,32,25,26,27,33,63,93,112,129,135,138,146,155,160,161,168,173,174,177,178,179,184,172,160,157,159,164,148,139,158,134,127,91,63,50,47,44,48,33,30,29,25,22,22,20,192,106,22,34,40,32,36,41,74,91,118,135,137,141,150,155,162,166,172,181,181,181,179,182,186,184,184,183,181,172,168,170,167,166,165,141,131,128,115,88,80,62,36,31,22,15,18,21,190,85,28,35,37,33,35,49,74,92,121,137,139,145,154,156,161,167,173,179,181,181,182,185,187,186,186,187,182,175,179,174,169,167,162,151,140,148,136,120,90,69,39,27,26,18,22,24,188,77,24,31,16,23,44,50,71,95,120,138,144,151,155,155,162,169,179,183,183,182,178,178,183,186,186,185,181,179,181,177,173,169,163,159,148,147,136,125,107,85,47,24,24,26,24,23,189,82,19,28,12,20,38,44,76,101,125,138,143,149,156,157,165,170,176,182,184,183,182,179,184,182,185,182,180,177,177,175,173,170,162,160,153,151,147,130,118,103,61,31,28,45,36,35,189,85,16,38,8,34,35,42,86,104,128,139,142,149,156,160,166,170,174,179,182,179,182,183,183,184,187,185,180,180,179,175,172,168,163,159,153,151,148,137,118,99,63,40,35,37,25,31,189,75,15,36,14,39,26,47,91,109,127,137,139,147,154,160,167,169,175,175,177,179,180,178,181,183,184,184,180,177,178,177,173,167,163,157,155,154,143,137,122,95,57,33,48,44,21,26,188,83,15,22,19,25,23,54,99,111,127,139,140,148,155,160,165,166,173,174,179,182,180,176,178,182,181,179,177,176,174,175,171,166,163,159,159,152,142,136,123,95,54,35,42,42,27,42,189,102,19,20,19,19,37,83,106,111,130,138,141,149,155,162,167,171,175,175,177,180,182,178,178,178,177,175,177,176,175,174,171,168,163,163,157,150,144,134,123,83,51,52,42,24,25,54,188,128,24,26,18,13,62,103,106,113,131,137,142,150,158,164,169,175,177,177,181,181,179,178,179,179,182,178,176,178,178,177,168,168,163,161,155,149,143,133,126,84,36,34,39,20,22,52,184,138,35,31,17,14,69,100,107,114,135,136,141,161,164,165,169,175,174,180,187,186,181,182,184,186,187,187,185,181,180,179,170,169,164,161,154,151,144,131,129,107,41,19,21,22,18,30,181,134,39,25,17,16,72,103,102,120,134,110,117,146,160,169,174,178,178,180,184,190,188,191,191,191,193,191,191,187,183,180,175,171,169,165,159,151,142,134,129,125,86,21,16,23,16,22,178,133,41,23,18,15,75,106,100,109,75,52,69,89,102,126,144,159,175,181,182,185,191,191,191,196,195,191,190,186,183,182,178,178,174,161,155,159,147,134,129,120,109,46,11,19,23,21,177,127,37,23,20,15,82,107,96,82,65,56,52,50,43,38,44,73,121,153,170,175,181,183,184,187,187,185,179,172,165,160,152,137,130,115,107,122,152,136,122,121,114,60,14,17,24,15,173,137,58,24,24,23,89,107,88,93,103,95,75,62,68,68,61,45,56,96,142,164,173,178,178,175,173,166,148,117,77,56,53,52,62,80,70,72,105,125,124,123,115,57,19,17,18,18,171,150,128,30,25,34,96,109,111,118,118,105,100,101,112,130,142,131,91,81,107,143,159,169,169,162,154,136,101,67,48,53,52,50,50,57,70,84,91,102,122,122,114,60,24,24,20,24,171,152,161,98,33,35,102,113,122,129,117,83,76,85,49,50,61,114,138,122,99,125,155,171,168,153,129,106,94,101,113,114,110,101,90,96,101,113,117,115,122,123,116,65,35,31,21,31,174,153,147,140,44,41,109,118,129,130,98,48,74,136,59,42,71,165,137,152,130,122,159,185,181,154,130,122,136,122,134,82,51,43,82,87,89,114,132,135,132,126,118,69,34,39,19,52,178,155,147,152,47,58,111,121,139,137,117,87,103,124,111,116,140,153,137,135,149,127,158,188,183,156,137,148,147,126,181,103,45,39,122,119,55,88,122,138,140,132,125,80,35,39,27,119,183,161,149,166,52,74,112,125,145,146,145,123,105,119,134,147,147,133,144,161,146,134,159,175,172,152,141,155,147,138,141,140,113,100,132,123,91,100,123,146,149,138,130,95,39,39,82,170,185,168,149,182,65,83,114,126,147,155,154,148,139,135,140,139,143,154,164,159,139,133,161,175,172,151,140,152,163,152,137,140,145,134,122,118,119,140,149,157,155,143,136,109,41,55,140,181,185,163,148,192,85,85,114,128,149,157,157,157,158,160,161,164,172,173,165,150,137,135,161,176,174,154,142,150,159,168,158,147,145,142,137,135,143,153,162,158,153,149,138,121,54,49,147,178,178,117,147,174,100,84,116,129,147,155,158,159,160,163,169,174,176,170,163,147,138,140,154,167,168,153,144,151,162,172,172,165,163,161,156,154,161,164,165,159,156,148,136,127,66,43,146,174,176,104,132,162,127,89,115,130,147,154,157,159,164,167,171,177,175,174,165,143,139,134,148,164,163,149,142,151,162,174,179,174,170,172,167,165,166,166,164,162,156,149,135,127,64,90,159,177,181,107,101,160,136,106,107,129,147,154,154,158,163,166,170,174,175,174,161,141,130,129,150,163,164,145,135,149,160,175,182,179,173,172,172,170,167,165,162,159,155,148,135,124,80,129,170,181,183,123,64,145,140,111,101,129,144,151,153,157,160,167,171,176,180,172,159,146,122,127,155,169,168,154,129,145,161,176,185,186,182,174,171,169,166,163,159,157,157,147,132,121,105,150,165,180,183,137,49,98,144,106,97,124,141,148,154,156,161,169,173,178,180,174,163,143,116,132,163,173,171,163,135,133,162,180,188,190,190,184,177,173,167,164,162,158,154,145,129,119,119,147,155,155,185,150,59,60,132,112,97,115,135,145,153,159,164,173,178,180,178,175,162,125,123,151,174,189,187,174,151,129,142,176,185,187,190,191,180,176,169,166,163,157,152,139,124,118,125,160,159,151,185,156,68,41,65,94,97,107,128,141,153,160,165,171,179,182,177,176,153,126,129,146,167,192,189,170,150,138,135,161,178,180,182,185,180,175,170,168,163,157,148,134,125,120,136,154,160,158,185,155,67,44,39,53,100,102,118,134,151,162,165,170,173,177,177,172,149,125,124,110,133,162,166,145,124,138,136,158,172,169,175,177,176,170,169,166,159,152,141,130,123,120,159,155,158,133,184,159,73,43,45,52,97,102,110,127,147,159,165,169,170,174,172,166,155,121,109,120,113,121,134,121,112,113,129,157,166,169,168,171,170,166,165,161,155,146,134,125,126,108,126,157,115,54,186,168,85,43,45,46,92,106,106,121,143,153,162,165,169,171,171,163,157,150,141,153,160,130,122,145,148,142,147,155,163,169,169,165,163,164,160,154,148,139,130,125,133,86,33,53,38,38,183,178,113,46,46,42,87,112,109,114,140,155,159,160,164,169,166,160,150,147,152,159,162,152,151,155,155,149,144,144,153,162,169,166,161,160,155,147,139,134,130,127,129,68,31,36,40,41,183,183,144,60,44,40,79,114,114,111,135,155,153,155,161,161,154,151,143,141,151,162,164,163,163,163,162,150,145,143,145,151,158,169,162,157,154,146,141,138,135,130,122,49,33,37,39,40,182,183,170,91,43,40,67,112,116,112,129,150,138,145,158,144,140,146,142,147,163,171,173,165,166,170,166,159,154,147,140,142,149,164,160,155,156,148,143,141,136,131,109,36,34,35,36,40,183,183,182,130,52,39,56,107,112,114,125,143,135,146,150,141,137,143,152,161,159,153,157,162,160,152,146,146,148,154,137,129,150,158,154,153,157,146,145,142,133,132,92,27,34,34,37,41,183,183,183,159,73,34,44,97,111,112,121,139,132,143,150,131,113,129,132,123,121,124,119,122,120,116,116,103,100,104,106,120,147,157,150,153,156,146,146,142,132,129,66,27,34,34,35,61,183,184,182,179,145,80,39,76,113,107,116,131,131,142,148,143,127,92,84,95,106,116,111,99,103,105,103,101,89,87,139,165,160,157,147,153,150,140,145,141,130,116,43,30,34,33,37,113,183,184,184,183,186,156,63,45,105,108,109,124,134,145,158,167,165,142,122,123,133,143,144,134,146,138,125,124,128,146,163,172,174,157,149,148,143,140,142,135,129,86,29,37,32,31,92,170,183,183,182,182,182,160,76,31,76,110,102,117,132,141,158,163,155,154,155,150,147,151,146,148,151,146,140,149,159,157,160,172,166,155,152,147,138,140,134,130,117,48,38,113,131,133,176,187,184,182,182,182,182,165,91,37,33,90,103,110,128,140,149,157,156,151,158,164,165,162,153,149,157,159,164,165,159,159,166,168,159,154,150,143,136,136,131,121,82,27,59,156,191,190,185,184,184,183,183,181,185,181,76,15,20,51,99,104,118,133,143,152,157,154,154,151,156,152,144,144,155,160,160,159,160,164,167,164,156,149,147,139,135,130,120,100,44,28,77,168,183,182,183,185,183,183,184,183,186,76,2,9,39,59,69,98,111,125,135,149,157,158,160,160,161,158,157,162,167,166,167,165,166,166,165,159,154,147,141,137,132,120,92,70,41,30,101,179,185,184,185,186,183,182,181,193,69,0,9,16,33,95,51,76,105,120,137,147,154,159,164,165,168,170,169,171,171,171,173,170,167,167,164,158,150,141,135,131,121,92,68,94,39,38,126,185,186,185,186,187,183,181,198,97,0,10,14,18,26,99,91,37,82,112,134,146,150,154,160,153,163,174,180,185,178,165,164,165,166,168,160,155,148,140,130,116,97,62,109,96,27,52,147,185,185,186,185,186,184,191,99,0,8,10,14,16,30,91,122,75,38,86,124,142,143,151,156,164,172,182,187,186,188,172,164,161,163,161,150,149,140,127,123,92,61,100,131,63,13,76,165,187,185,185,186,186,179,77,0,7,7,10,12,14,27,91,120,135,63,36,97,132,132,146,152,162,176,178,172,172,182,179,165,153,154,148,140,136,120,110,86,55,95,123,119,49,0,92,180,186,185,184,187,187]).reshape(1, img_width, img_height, 1)
    input_img_data = (input_img_data - 0.5) * 20 + 128

    # we run gradient ascent for 20 steps
    for i in range(500):
        loss_value, grads_value = iterate([input_img_data, False])
        input_img_data += grads_value * step

        print('Current loss value:', loss_value)
        if loss_value <= 0.:
            # some filters get stuck to 0, we can skip them
            break

    # decode the resulting input image
    if loss_value > 0:
        img = deprocess_image(input_img_data[0])
        kept_filters.append((img, loss_value))
    end_time = time.time()
    print('Filter %d processed in %ds' % (filter_index, end_time - start_time))

# we will stich the best 64 filters on a 8 x 8 grid.
n = 4
#embed()

# the filters that have the highest loss are assumed to be better-looking.
# we will only keep the top 64 filters.
kept_filters.sort(key=lambda x: x[1], reverse=True)
kept_filters = kept_filters[:n * n]

# build a black picture with enough space for
# our 8 x 8 filters of size 128 x 128, with a 5px margin in between
margin = 5
width = n * img_width + (n - 1) * margin
height = n * img_height + (n - 1) * margin
stitched_filters = np.zeros((width, height, 3))

# fill the picture with our saved filters
for i in range(n):
    for j in range(n):
        img, loss = kept_filters[i * n + j]
        stitched_filters[(img_width + margin) * i: (img_width + margin) * i + img_width,
                         (img_height + margin) * j: (img_height + margin) * j + img_height, :] = img

# save the result to disk
#imsave('stitched_filters_%dx%d.png' % (n, n), stitched_filters)
imsave('filters.png', stitched_filters)
